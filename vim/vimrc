set nocompatible              " be iMproved, required

if &shell =~# 'fish$'   "This is a compatibility fix for fish-shell and plugins
    set shell=sh
endif

filetype off                  " required

if empty(glob("~/.vim/bundle/Vundle.vim"))
  call system('git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim')
endif

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Navigation
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'christoomey/vim-tmux-navigator'


" Search
Plugin 'mileszs/ack.vim'                " Experimenting with ag, the silver searcher
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif


" HashiVim Tools
Plugin 'hashivim/vim-vagrant'
Plugin 'hashivim/vim-consul'
Plugin 'hashivim/vim-packer'
Plugin 'hashivim/vim-terraform'
Plugin 'hashivim/vim-vaultproject'
Plugin 'hashivim/vim-nomadproject'

" colors
Plugin 'altercation/vim-colors-solarized'

" syntax support
Plugin 'keith/tmux.vim'
Plugin 'saltstack/salt-vim'
Plugin 'Glench/Vim-Jinja2-Syntax'
Plugin 'dag/vim-fish'
Plugin 'fatih/vim-go'

" some fancy things are being added here
if has("lua")
Plugin 'Shougo/neocomplete.vim'
Plugin 'Shougo/neosnippet'
Plugin 'Shougo/neosnippet-snippets'
endif
Plugin 'Konfekt/FastFold'
Plugin 'Shougo/vimshell.vim'

" Misc
Plugin 'tpope/vim-fugitive'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" ================ Solarized ================================
if !empty(glob("~/.vim/bundle/vim-colors-solarized"))
  set background=dark
  colorscheme solarized
endif

" ================ File types ================================

set encoding=utf-8
filetype on          " enables filetype detection
filetype plugin on   " enables filetype specific pugins
filetype indent on   " enables filetype detection for indenting
syntax enable


" ================ Lines and cursors  ========================
"
set number                      "Line numbers are good
set backspace=indent,eol,start  "Allow backspace in insert mode
set gcr=a:blinkon0              "Disable cursor blink
" Display tabs and trailing spaces visually
set list listchars=tab:→\ ,trail:∙


" ================ Turn Off Swap Files ==============
"
set noswapfile
set nobackup
set nowritebackup


" ================ Persistent Undo ==================
" " Keep undo history across sessions, by storing in file.
" " Only works all the time.
"
let backupdir = expand('~/.vim/backups')
if !isdirectory(backupdir)
  call mkdir(backupdir)
  endif
  set undodir=~/.vim/backups
  set undofile

" ================ Indentation ======================
"
set autoindent
set smartindent
set smarttab

"I'm a spaces guy
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

set nowrap
set linebreak " Wrap lines at convenient points

let g:indent_guides_auto_colors = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size  = 1


" ================ Folds ============================
" I like folding
set foldenable        "fold by default
set foldmethod=syntax


" ================ NerdTree autocmd stuffss =============
if !empty(glob("~/.vim/bundle/nerdtree"))
  let g:NERDTreeIndicatorMapCustom = {
      \ "Modified"  : "✹",
      \ "Staged"    : "✚",
      \ "Untracked" : "✭",
      \ "Renamed"   : "➜",
      \ "Unmerged"  : "═",
      \ "Deleted"   : "✖",
      \ "Dirty"     : "✗",
      \ "Clean"     : "✔︎",
      \ "Unknown"   : "?"
      \ }
endif

"================= Remaping =================
" F1 Gbrowse
nnoremap <F1> :Gbrowse<CR>
"F2 line number toggle
nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>
" <F3> = Toggle NERDTree
nnoremap <F3> :NERDTreeToggle<CR>
" <F4> = Toggle paste mode
set pastetoggle=<F4>



if has("lua")
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" SuperTab like snippets behavior.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif


" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"
endif

"================= enable powerline ====================
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup
set laststatus=2


if has("lua")
let g:neocomplete#enable_at_startup = 1

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }


" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'


" Omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
endif

hi Normal ctermbg=none




set guifont=Meslo\ LG\ M\ Regular\ for\ Powerline:h12
