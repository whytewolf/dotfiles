set nocompatible              " be iMproved, required


if &shell =~# 'fish$'    "This is a compatibility fix for fish-shell and plugins
    set shell=sh
endif

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif


call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')
" ================ Vundle plugins ================================

" Navigation
Plug 'scrooloose/nerdtree' , { 'on':  ['NERDTreeToggle', 'NERDTreeFind'] } "Loads only when opening NERDTree
Plug 'benmills/vimux'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'christoomey/vim-tmux-navigator'


" Search
Plug 'mileszs/ack.vim'            " Experimenting with ag, the silver searcher
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif


" HashiVim Tools
Plug 'hashivim/vim-vagrant'
Plug 'hashivim/vim-consul'
Plug 'hashivim/vim-packer'
Plug 'hashivim/vim-terraform'
Plug 'hashivim/vim-vaultproject'
Plug 'hashivim/vim-nomadproject'

" colors
"Plug 'altercation/vim-colors-solarized'
Plug 'sainnhe/edge'


" syntax support
Plug 'keith/tmux.vim'
Plug 'tmux-plugins/vim-tmux'
Plug 'saltstack/salt-vim'
Plug 'Glench/Vim-Jinja2-Syntax', { 'for' : ['jinja2']}
Plug 'vim-syntastic/syntastic'
"Plug 'sheerun/vim-polyglot'
Plug 'godlygeek/tabular'
Plug 'preservim/vim-markdown', { 'for' : ['markdown']} "Loads for markdown only

" some fancy things are being added here
Plug 'Konfekt/FastFold'
Plug 'Shougo/vimshell.vim'
Plug 'editorconfig/editorconfig-vim'

" Misc
Plug 'tpope/vim-fugitive'
Plug 'jpalardy/vim-slime'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'lgalke/vim-compiler-vale'
Plug 'tpope/vim-obsession'
Plug 'dhruvasagar/vim-prosession'
Plug 'brooth/far.vim'
Plug 'vim-python/python-syntax', { 'for' : ['python']}

" RST support
Plug 'Rykka/riv.vim'
Plug 'Rykka/InstantRst'

" All of your Plugs must be added before the following line
call plug#end()            " required

" ============= edge color scheme =======================
colorscheme edge
set background=dark


" ================ File types ================================

set encoding=utf-8
filetype on          " enables filetype detection


" ================ Lines and cursors  ========================
"
set number                      "Line numbers are good
set backspace=indent,eol,start  "Allow backspace in insert mode
set gcr=a:blinkon0              "Disable cursor blink
" Display tabs and trailing spaces visually
set list listchars=tab:→\ ,trail:∙


" ================ Turn Off Swap Files ==============
"
set noswapfile
set nobackup
set nowritebackup


" ================ Persistent Undo ==================
" " Keep undo history across sessions, by storing in file.
" " Only works all the time.
"
let backupdir = expand('~/.vim/backups')
if !isdirectory(backupdir)
  call mkdir(backupdir)
  endif
  set undodir=~/.vim/backups
  set undofile

" ================ Indentation ======================
"
set autoindent
"set smartindent
set smarttab

"I'm a spaces guy
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

set nowrap
set linebreak " Wrap lines at convenient points

let g:indent_guides_auto_colors = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size  = 1


" ================ Folds ============================
" I like folding
set foldenable        "fold by default
set foldmethod=syntax


" ================ NerdTree autocmd stuffss =============

let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

"================= Remaping =================
" F1 Gbrowse
nnoremap <F1> :Gbrowse<CR>
"F2 line number toggle
nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>
" <F3> = Toggle NERDTree
nnoremap <F3> :NERDTreeToggle<CR>
" <F4> = Toggle paste mode
set pastetoggle=<F4>

nnoremap <F8> :SyntasticToggleMode<CR>
nnoremap <F5> :SyntasticCheck<CR>

nnoremap <F6> :exe "!tmux send -t 1 'pre-commit' Enter"<CR><CR>
nnoremap <F7> :exe "!tmux send -t 1 'git add .' Enter"<CR><CR>
" markdown settings


"hi Normal ctermbg=none
set guifont=Meslo\ LG\ M\ Regular\ for\ Powerline:h12


"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

let g:syntastic_python_pylint_args = "--rcfile=~/.pylintrc --disable=I"



"======================= vim-slime ================
let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": get(split($TMUX, ","), 0), "target_pane": "{last}"}

"====================== vim-airline ===============
let g:airline_powerline_fonts = 1


"======================= instantRST ================
let g:instant_rst_forever = 1
let g:instant_rst_localhost_only = 0

